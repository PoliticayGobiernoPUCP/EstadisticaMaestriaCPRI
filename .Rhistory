alumnos=data.frame(edad, carrera, ciudad,nota_mate, row.names=nombre)
#revisar datos
str(alumnos)
#notar problema: R está coercionando algunas varuables a factores (variables categóricas). Si no queremos eso,
#debemos crear nuestra data frame haciendolo explicito:
alumnos=data.frame(nombre, edad, carrera, ciudad,nota_mate,
stringsAsFactors = F)
str(alumnos)
#En esta nueva versión, incluimos nombres como columna y no como nombre de la fila, R pondra numeros ...
#Para buscar elementos debemos tomar en cuenta la estructura: aDataFrame[fila, columna]
alumnos$nombre #una columna
alumnos[,c("edad", "carrera")] #dos columnas
alumnos[,c(1,3)] #dos columnas si sabemos la posicion de las columnas
#Usar posiciones es la mejor forma de obtener multiples columnas
alumnos[,c(1:3)]
#Podemos crear nuevos objetos con estos subsets
alumnos_nuevo <- alumnos[,c(1:3)]
#Se pueden modificar todos los elementos de una data frame. Creemos una copia para hacer modificaciones:
alumnos_copia <- alumnos
#Puedo modificar la edad de Antonetta
alumnos_copia[1,2] =32 #el cambio es inmediato (sin advertencia)
alumnos_copia[2,]#el cambio es inmediato (sin advertencia)
alumnos_copia[1,2]=32
alumnos_copia[2,]#el cambio es inmediato (sin advertencia)
alumnos_copia[alumnos_copia[1,2]=32]
alumnos_copia[alumnos_copia[1,2]==32]
alumnos_copia[1,2]
alumnos_copia <- alumnos_copia[alumnos_copia[1,2]==32]
alumnos_copia[2,]
alumnos_copia[1,]
alumnos_copia[1,2]=32
alumnos_copia[1,] #el cambio no se refleja en la data frame, debo guardar un objeto con el cabmio
nombre=c("Almendra", "Antonella", "Maria Fernanda", "Manuel", "Alvaro", "Paula", "Gustavo", "Edgar", "Victor")
edad=c(23,20,21,19,18,22,23,25,28)
carrera=c("Gestion", "Ciencia Politica", "Economia", "Sociologia", "Antropologia", "Ciencia Politica", "Gestion", "Economia", "Sociologia")
ciudad=c("Lima", "Lima", "Tacna", "Huancayo", "Trujillo", "Cusco", NA, "Cusco", "Cajamarca")
nota_mate= c(18,9,15,12,14,13,19,10,13)
#DF como una "lista" de vectores
alumnos=data.frame(edad, carrera, ciudad,nota_mate, row.names=nombre)
#revisar datos
str(alumnos)
#notar problema: R está coercionando algunas varuables a factores (variables categóricas). Si no queremos eso,
#debemos crear nuestra data frame haciendolo explicito:
alumnos=data.frame(nombre, edad, carrera, ciudad,nota_mate,
stringsAsFactors = F)
str(alumnos)
#En esta nueva versión, incluimos nombres como columna y no como nombre de la fila, R pondra numeros ...
#Para buscar elementos debemos tomar en cuenta la estructura: aDataFrame[fila, columna]
alumnos$nombre #una columna
alumnos[,c("edad", "carrera")] #dos columnas
alumnos[,c(1,3)] #dos columnas si sabemos la posicion de las columnas
#Usar posiciones es la mejor forma de obtener multiples columnas
alumnos[,c(1:3)]
#Podemos crear nuevos objetos con estos subsets
alumnos_nuevo <- alumnos[,c(1:3)]
#Se pueden modificar todos los elementos de una data frame. Creemos una copia para hacer modificaciones:
alumnos_copia <- alumnos
#Puedo modificar la edad de Almendra
alumnos_copia[1,2]=32
alumnos_copia[1,] #el cambio no
alumnos_copia[2,2]
alumnos_copia[2,3]
alumnos_copia[2,3]=NA
alumnos_copia[2,]
alumnos[order(alumnos$edad, decreasing=T),]
alumnos_copia[order(alumnos_copia$edad, decreasing=T),]
alumnos_copia <- alumnos_copia[order(alumnos_copia$carrera,-alumnos_copia$edad ),] #multiples columnas para ordenar #notar uso  de -
alumnos_copia
str(alumnos)
dim(alumnos)
nrows(alumnos)
nrow(alumnos)
ncol(alumnos)
length(alumnos)
length(nombre)
names(alumnos)
print(suma)
print(resta)
print(div)
print(mult)
print(exp)
print(raiz)
head(alumnos)
head(alumnos,3)
tail(alumnos)
tail(alumnos,2)
tail(alumnos,3)
nombre=c("Almendra", "Antonella", "Maria Fernanda", "Manuel", "Alvaro", "Paula", "Gustavo", "Edgar", "Victor")
edad=c("23","20","21","19","18","22","23","25","28")
carrera=c("Gestion", "Ciencia Politica", "Economia", "Sociologia", "Antropologia", "Ciencia Politica", "Gestion", "Economia", "Sociologia")
ciudad=c("Lima", "Lima", "Tacna", "Huancayo", "Trujillo", "Cusco", NA, "Cusco", "Cajamarca")
nota_mate= c(18,9,15,12,14,13,19,10,13)
str(alumnos$edad)
nombre=c("Almendra", "Antonella", "Maria Fernanda", "Manuel", "Alvaro", "Paula", "Gustavo", "Edgar", "Victor")
edad=c("23","20","21","19","18","22","23","25","28")
carrera=c("Gestion", "Ciencia Politica", "Economia", "Sociologia", "Antropologia", "Ciencia Politica", "Gestion", "Economia", "Sociologia")
ciudad=c("Lima", "Lima", "Tacna", "Huancayo", "Trujillo", "Cusco", NA, "Cusco", "Cajamarca")
nota_mate= c(18,9,15,12,14,13,19,10,13)
#DF como una "lista" de vectores
alumnos=data.frame(edad, carrera, ciudad,nota_mate, row.names=nombre)
str(alumnos$edad)
alumnos=data.frame(nombre, edad, carrera, ciudad,nota_mate,
stringsAsFactors = F)
str(alumnos)
str(alumnos$edad)
sum(alumnos$edad)
alumnos$edad <- as.numeric(alumnos$edad)
str(alumnos$edad)
sum(alumnos$edad)
ciudad=c("Bangkok", "Dubai", "Hong Kong", "Instanbul", "Kuala Lumpur",
"London", "New York", "Paris", "Seoul", "Singapore")
en2015=c(18.24, 14.26, 8.66, 12.56, 11.12, 18.82, 12.27, 16.06, 10.35, 11.88)
region=c("Asia", "Asia", "Asia", "Europe", "Asia", "Europe",
"America", "Europe", "Asia", "Asia")
c15 = data.frame(City,in2015,region)
ciudad=c("Bangkok", "Barcelona", "Dubai", "Hong Kong", "Instanbul", "Kuala Lumpur",
"London", "New York", "Paris", "Singapore")
en2013=c(15.98,8.41,9.89,8.72,10.37,9.20,15.96,11.52,13.92,11.75)
region=c("Asia", "Europe", "Asia", "Asia", "Europe", "Asia", "Europe",
"America", "Europe", "Asia")
c13 = data.frame(City,in2013,region)
ciudad=c("Bangkok", "Dubai", "Hong Kong", "Instanbul", "Kuala Lumpur",
"London", "New York", "Paris", "Seoul", "Singapore")
en2015=c(18.24, 14.26, 8.66, 12.56, 11.12, 18.82, 12.27, 16.06, 10.35, 11.88)
region=c("Asia", "Asia", "Asia", "Europe", "Asia", "Europe",
"America", "Europe", "Asia", "Asia")
c15 = data.frame(ciudad,en2015,region)
ciudad=c("Bangkok", "Barcelona", "Dubai", "Hong Kong", "Instanbul", "Kuala Lumpur",
"London", "New York", "Paris", "Singapore")
en2013=c(15.98,8.41,9.89,8.72,10.37,9.20,15.96,11.52,13.92,11.75)
region=c("Asia", "Europe", "Asia", "Asia", "Europe", "Asia", "Europe",
"America", "Europe", "Asia")
c13 = data.frame(ciudad,en2013,region)
c13
View(c13)
c15[order(c15$en2015, decreasing=T),] #si no utilizamos decreasing, será ascendiente por default
c15[order(c15$region, -c15$en2015 ),] #ojo: utilizamos - y no decreasing
is.data.frame(c13[,c("ciudad", "region")])
c13[,c(1,3)]
is.data.frame(c13[,c(1)])
is.data.frame(c13[,c("ciudad")])
is.data.frame(c13[,c("ciudad")])
is.data.frame(c13[,c("ciudad")])
is.data.frame(c13$ciudad)
c13[,c(1,3)]
c15[c15$en2015==max(c15$en2015),]$ciudad
c15[which.max(c15$en2015),]$ciudad
c15[c15$en2015==max(c15$en2015),]
c13[c13$region=="Europe" & c13$en2013==min(c13$en2013),]$ciudad
c13[c13$region=="Europe" & c13$en2013==min(c13$en2013),]
c15[which.min(c15$en2015),]$ciudad
c13[c13$region=="Europe" & c13$en2013==which.min(c13$en2013),]$ciudad
c13[c13[3]=="Europe" & c13[2]==min(c13[2]),]$ciudad
attach(c13)
c13[region=="Europe" & en2013==min(en2013),]$ciudad
detach(c13)
head(c15[order(-c15$en2015),]
[c15[order(-c15$en2015),]$region=="Asia",],3)
temp1=c15[order(-c15$en2015),] #ordenar
temp2=temp1[temp1$region=="Asia",]#cortar
resp=head(temp2,3)
resp
rownames(resp)=NULL
resp
temp=c13[order(-c13$en2013),]#Ordenar
temp=temp[temp$region=="Asia",]#Recortar
respB=temp[c(1,nrow(temp)),] #obtener la última fila
#rownames(respB)=NULL
respB
temp=c13[order(-c13$en2013),]
temp=temp[temp$region=="Asia",]
temp
temp[c(1,nrow(temp)),]
temp[c(nrow(temp)),]
temp=c13[order(-c13$en2013),] #ordenar
temp=c13[order(-c13$en2013),] #ordenar
temp=temp[temp$region == "Asia",] #cortar
respC=temp[2:(nrow(temp)-1),]
temp=c15[order(-c15$en2015),]#ordering
respC
temp=c15[order(-c15$en2015),]#ordenar
temp=temp[temp$region=="Asia",]#cortar
respD=rbind(head(temp,2), tail(temp,2))
respD
rownames(respD)=NULL
respD
temp=c15[order(-c15$en2015),]#ordenar
temp=temp[temp$region=="Asia",]#cortar
respD=rbind(head(temp,2), tail(temp,2))
respD
respD
rownames(respD)=NULL
merge(c13,c15)
merge(c13, c15, all.y=T)
merge(c13, c15, all.x =T)
merge(c13, c15, all.x =T, all.y = T)
c13c15 = merge(c13, c15, all.x =T, all.y = T)
c13c15
c13c15 = merge(c13, c15, all.x =T, all.y = T)
c13c15
apply(c13c15[c(3,4)], 2,sum, na.rm=T)
apply(c13c15[c(3,4)], 2,sum, na.rm=T)
c13c15$sum1315=apply(c13c15[c(3,4)], 1,sum, na.rm=T)
c13c15
lapply(c13c15[c(3,4)],sum,na.rm=T) #with lappy you get a list, whereas sapply will give you vectors
lapply(c13c15[c(1,2)],toupper)
c13c15[c(1,2)] =lapply(c13c15[c(1,2)],toupper)
apply(c13c15[c(3,4)],sum,na.rm=T)
lapply(c13c15[c(1,2)],toupper)
c13c15[c(1,2)] =lapply(c13c15[c(1,2)],toupper) #cambiar en la data
c13c15
if (value >= 0){
# que hacer si la condicion se cumple
raiz=sqrt(value)
print (raiz)
} else {
# what to do if condition is FALSE
print('Lo siento, no se calcula la raiz de numeros negativos')
}
valor=-100
#condicion
if (valor >= 0){
# que hacer si la condicion se cumple
raiz=sqrt(value)
print (raiz)
} else {
# what to do if condition is FALSE
print('Lo siento, no se calcula la raiz de numeros negativos')
}
valores=c(9,25,100)
for (valor in valores){ # haz esto para cada valor
print(sqrt(valores))
}
valores=c(9,25,100)
for (valor in valores){ # haz esto para cada valor
print(sqrt(valor))
}
valores=c(9,25,100)
for (i in valores){ # haz esto para cada valor
print(sqrt(i))
}
valores=c(9,25,-100)
raizvalores=c()
for (valor in valores){
raizvalores=c(raizvalores,sqrt(valor))
}
# to see the results:
raizvalores
c(raizvalores,sqrt(valor))
raizvalores
valores=c(9,25,-100)
raizvalores=c()
for (valor in valores){
raizvalores=c(sqrt(valor))
}
# to see the results:
raizvalores
c(raizvalores,sqrt(valor))
valores=c(9,25,-100)
raizvalores=c()
for (valor in valores){
raizvalores=c(raizvalores,sqrt(valor))
}
# to see the results:
raizvalores
edad
nombre
if (alumnos$edad[1]%%2==0)
{print("it is even")}
alumnos$edad <- as.numeric(alumnos$edad)
if (alumnos$edad[1]%%2==0)
{print("it is even")}
if (alumnos$edad[1]%%2==0)
{print("it is even")}
library(foreign)
mapa<-read.dbf("provinciasPeru.dbf")###tiene acentos y ñs
#nota: no hay informacion de datem del marañon: lo voy a eliminar de las otras bases
mapa$Provincia <- toupper(mapa$NAME_2) #crear nueva variable con mayusculas
library(stringi)
mapa$Provincia <- stri_trans_general(mapa$Provincia,"Latin-ASCII") #quitar tildes y ñs
#HUANUCO está escrito como HUENUCO:
mapa$Provincia[mapa$Provincia == "HUENUCO"] <- "HUANUCO"
#ojo con Callao y con Carlos Fermin Fitzcarrald y Daniel Alcides Carrion que estan escritos de manera diferente en todas las bases
write.dbf(mapa, file="provinciasPeru.dbf")
#### idh Peru ----
#provincias en 2007 # minusculas y tildes
library(openxlsx)
idhPeru<- read.xlsx("idhPeru.xlsx",skipEmptyRows = T, skipEmptyCols = T, sheet=4, startRow = 5)
idhPeru <- idhPeru[-c(1435,2056:2061),]#eliminar filas innecesarias
idhPeru <- idhPeru[is.na(idhPeru$X2),] #seleccionar provincias
idhPeru <- idhPeru[,-c(2,5,7,9,11,13,15)]#eliminar columnas
colnames(idhPeru) <- c("Ubigeo", "Provincia", "habitantes", "IDH", "esperanza", "secundaria", "educa", "percapitaf")
rownames(idhPeru) <- 1:nrow(idhPeru)
idhPeru$Provincia <- toupper(idhPeru$Provincia) # mayusculas
idhPeru$Provincia <- stri_trans_general(idhPeru$Provincia,"Latin-ASCII") #quitar tildes y ñs
##Callao y Carlos Fermin estan bien. arreglar DANIEL A. CARRION
idhPeru$Provincia[idhPeru$Provincia == "DANIEL A. CARRION"] <- "DANIEL ALCIDES CARRION"
##Problema con Satipo:
idhPeru$Provincia[idhPeru$Provincia == "SATIPO 2/"] <- "SATIPO"
#eliminar datem del marañon
idhPeru <- idhPeru[!idhPeru$Provincia=="DATEM DEL MARANON",]
write.xlsx(idhPeru, "idhPeru.xlsx")
#### idh_elec----
#mayusculas sin tildes
idh_elec <- read.csv("idh_elec.csv",strip.white = T,stringsAsFactors = F)
idh_elec <- as.data.frame(aggregate(cbind(PPK, FP) ~ ubiProv + prov, data = idh_elec, sum, na.rm = F))
colnames(idh_elec) <- c("Ubigeo", "Provincia", "Voto_PPK", "Voto_FP")
##Callao y Carlos Fermin estan bien. arreglar DANIEL A. CARRION
idh_elec$Provincia[idh_elec$Provincia == "DANIEL A. CARRION"] <- "DANIEL ALCIDES CARRION"
#eliminar datem del marañon
idh_elec <- idh_elec[!idh_elec$Provincia=="DATEM DEL MARANON",]
write.xlsx(idh_elec, "idh_elec.xlsx")
#### fecundidad----
#mayusculas y sin tildes  pero con ñs
fecundidad<- read.xlsx("fecundidad.xlsx",skipEmptyRows = T, skipEmptyCols = T, startRow = 3)
fecundidad$prov <- substr(fecundidad$Ubigeo,5,6) #identificar provincias y departamentos: 00
fecundidad$dep<- substr(fecundidad$Ubigeo,3,4) #identificar departamentos: 00
fecundidad<- fecundidad[!fecundidad$dep=="00" & fecundidad$prov=="00",][,c(1:5)] #seleccionar provincias
fecundidad<- fecundidad[complete.cases(fecundidad),]
colnames(fecundidad) <- c("Ubigeo", "Provincia", "mortalidadinf", "fecundidad", "desnutricion")
rownames(fecundidad) <- 1:nrow(fecundidad)
fecundidad[c(3:5)] =lapply(fecundidad[c(3:5)],as.numeric) #volverlas numericas
fecundidad$Provincia <- stri_trans_general(fecundidad$Provincia,"Latin-ASCII") #quitar tildes y ñs
##Callao está bien carlos fermin  esta como CARLOS F. FITZCARRALD transformar:
fecundidad$Provincia[fecundidad$Provincia == "CARLOS F. FITZCARRALD"] <- "CARLOS FERMIN FITZCARRALD"
#eliminar datem del marañon
fecundidad <- fecundidad[!fecundidad$Provincia=="DATEM DEL MARANON ",]
write.xlsx(fecundidad, "fecundidad.xlsx")
### indicadoresvarios ----
#minusculas con tildes
indicadores<- read.xlsx("indicadoresvarios.xlsx",skipEmptyRows = T, skipEmptyCols = T, startRow = 7)
indicadores <- indicadores[,-c(1,4, 7: 14)]#eliminar columnas innecesarias
colnames(indicadores) <- c("Departamento", "Provincia", "densidadpob", "mortalidadinf", "analfabetismo",
"analfabetismo_urb", "analfabetismo_rural", "analfabetismo_h", "analfabetismo_m")
#analfabetismo rural está como caracter
indicadores$analfabetismo_rural<- as.numeric(indicadores$analfabetismo_rural)
indicadores$Provincia <- toupper(indicadores$Provincia) #mayusculas
indicadores$Provincia <- stri_trans_general(indicadores$Provincia,"Latin-ASCII") #quitar tildes y ñs
#carlos fermin esta bien. arreglar callao:
indicadores$Provincia[indicadores$Provincia == "PROVINCIA CONSTITUCIONAL DEL CALLAO"] <- "CALLAO"
#eliminar datem del marañon
indicadores <- indicadores[!indicadores$Provincia=="DATEM DEL MARANON",]
write.xlsx(indicadores, "indicadoresvarios.xlsx")
### poblacion ----
#minusculas con tildes
poblacion<- read.xlsx("poblacion.xlsx",skipEmptyRows = T, skipEmptyCols = T ,startRow = 7)
poblacion <- poblacion[,-c(1,4)]#eliminar columnas innecesarias
colnames(poblacion) <- c("Departamento", "Provincia", "pob", "pob_ur", "pob_rural", "pob_h", "pob_m")
poblacion$Provincia <- toupper(poblacion$Provincia) #mayusculas
poblacion$Provincia <- stri_trans_general(poblacion$Provincia,"Latin-ASCII") #quitar tildes y ñs
#carlos fermin esta bien. arreglar callao:
poblacion$Provincia[poblacion$Provincia == "PROVINCIA CONSTITUCIONAL DEL CALLAO"] <- "CALLAO"
#eliminar datem del marañon
poblacion <- poblacion[!poblacion$Provincia=="DATEM DEL MARANON",]
write.xlsx(poblacion, "poblacion.xlsx")
### ingreso per capita----
#minusculas con tildes
ingreso<- read.xlsx("Ingreso-Per-Capita.xlsx",skipEmptyRows = T, skipEmptyCols = T ,startRow = 3)
ingreso <- ingreso[is.na(ingreso$Distrito),] #eliminar distritos
ingreso <- ingreso[!is.na(ingreso$Provincia),] #seleccionar provincias
ingreso <- ingreso[,c(1:3,5)]#seleccionar columas
colnames(ingreso) <- c("Ubigeo", "Departamento", "Provincia", "percapitaf")
ingreso$Provincia <- toupper(ingreso$Provincia) #mayusculas
ingreso$Provincia <- stri_trans_general(ingreso$Provincia,"Latin-ASCII") #quitar tildes y ñs
##No hay info de Callao y Carlos Fermin estan bien. arreglar DANIEL A. CARRION
ingreso$Provincia[ingreso$Provincia == "DANIEL A. CARRION"] <- "DANIEL ALCIDES CARRION"
#eliminar datem del marañon
ingreso <- ingreso[!ingreso$Provincia=="DATEM DEL MARANON",]
##Problema con Satipo:
ingreso$Provincia[ingreso$Provincia == "SATIPO 2/"] <- "SATIPO"
write.xlsx(ingreso, "Ingreso-Per-Capita.xlsx")
##Densidad Estado----
#minusculas con tildes
idePeru<- read.xlsx("idePeru.xlsx",skipEmptyRows = T, skipEmptyCols = T, sheet=4, startRow = 6)
idePeru <- idePeru[-c(221:224),]#eliminar filas innecesarias
idePeru <- idePeru[is.na(idePeru$X2),] #seleccionar provincias
idePeru <- idePeru[,-c(2,5,7,9,11,13,15,17)]#eliminar columnas innecesarias
colnames(idePeru) <- c("Ubigeo", "Provincia", "habitantes", "IDE", "identidad", "salud", "educacion", "saneamiento", "electrificacion")
idePeru$Provincia <- toupper(idePeru$Provincia) #mayusculas
idePeru$Provincia <- stri_trans_general(idePeru$Provincia,"Latin-ASCII") #quitar tildes y ñs
##Callao y Carlos Fermin estan bien. arreglar DANIEL A. CARRION
idePeru$Provincia[idePeru$Provincia == "DANIEL A. CARRION"] <- "DANIEL ALCIDES CARRION"
##Problema con Satipo:
idePeru$Provincia[idePeru$Provincia == "SATIPO 1/"] <- "SATIPO"
#eliminar datem del marañon
idePeru <- idePeru[!idePeru$Provincia=="DATEM DEL MARANON",]
write.xlsx(idePeru, "idePeru.xlsx")
setwd("~/Documents/GitHub/EstadisticaMaestriaCPRI/data original")
library(foreign)
mapa<-read.dbf("provinciasPeru.dbf")###tiene acentos y ñs
#nota: no hay informacion de datem del marañon: lo voy a eliminar de las otras bases
mapa$Provincia <- toupper(mapa$NAME_2) #crear nueva variable con mayusculas
library(stringi)
mapa$Provincia <- stri_trans_general(mapa$Provincia,"Latin-ASCII") #quitar tildes y ñs
#HUANUCO está escrito como HUENUCO:
mapa$Provincia[mapa$Provincia == "HUENUCO"] <- "HUANUCO"
#ojo con Callao y con Carlos Fermin Fitzcarrald y Daniel Alcides Carrion que estan escritos de manera diferente en todas las bases
write.dbf(mapa, file="provinciasPeru.dbf")
#### idh Peru ----
#provincias en 2007 # minusculas y tildes
library(openxlsx)
idhPeru<- read.xlsx("idhPeru.xlsx",skipEmptyRows = T, skipEmptyCols = T, sheet=4, startRow = 5)
idhPeru <- idhPeru[-c(1435,2056:2061),]#eliminar filas innecesarias
idhPeru <- idhPeru[is.na(idhPeru$X2),] #seleccionar provincias
idhPeru <- idhPeru[,-c(2,5,7,9,11,13,15)]#eliminar columnas
colnames(idhPeru) <- c("Ubigeo", "Provincia", "habitantes", "IDH", "esperanza", "secundaria", "educa", "percapitaf")
rownames(idhPeru) <- 1:nrow(idhPeru)
idhPeru$Provincia <- toupper(idhPeru$Provincia) # mayusculas
idhPeru$Provincia <- stri_trans_general(idhPeru$Provincia,"Latin-ASCII") #quitar tildes y ñs
##Callao y Carlos Fermin estan bien. arreglar DANIEL A. CARRION
idhPeru$Provincia[idhPeru$Provincia == "DANIEL A. CARRION"] <- "DANIEL ALCIDES CARRION"
##Problema con Satipo:
idhPeru$Provincia[idhPeru$Provincia == "SATIPO 2/"] <- "SATIPO"
#eliminar datem del marañon
idhPeru <- idhPeru[!idhPeru$Provincia=="DATEM DEL MARANON",]
write.xlsx(idhPeru, "idhPeru.xlsx")
#### idh_elec----
#mayusculas sin tildes
idh_elec <- read.csv("idh_elec.csv",strip.white = T,stringsAsFactors = F)
idh_elec <- as.data.frame(aggregate(cbind(PPK, FP) ~ ubiProv + prov, data = idh_elec, sum, na.rm = F))
colnames(idh_elec) <- c("Ubigeo", "Provincia", "Voto_PPK", "Voto_FP")
##Callao y Carlos Fermin estan bien. arreglar DANIEL A. CARRION
idh_elec$Provincia[idh_elec$Provincia == "DANIEL A. CARRION"] <- "DANIEL ALCIDES CARRION"
#eliminar datem del marañon
idh_elec <- idh_elec[!idh_elec$Provincia=="DATEM DEL MARANON",]
write.xlsx(idh_elec, "idh_elec.xlsx")
#### fecundidad----
#mayusculas y sin tildes  pero con ñs
fecundidad<- read.xlsx("fecundidad.xlsx",skipEmptyRows = T, skipEmptyCols = T, startRow = 3)
fecundidad$prov <- substr(fecundidad$Ubigeo,5,6) #identificar provincias y departamentos: 00
fecundidad$dep<- substr(fecundidad$Ubigeo,3,4) #identificar departamentos: 00
fecundidad<- fecundidad[!fecundidad$dep=="00" & fecundidad$prov=="00",][,c(1:5)] #seleccionar provincias
fecundidad<- fecundidad[complete.cases(fecundidad),]
colnames(fecundidad) <- c("Ubigeo", "Provincia", "mortalidadinf", "fecundidad", "desnutricion")
rownames(fecundidad) <- 1:nrow(fecundidad)
fecundidad[c(3:5)] =lapply(fecundidad[c(3:5)],as.numeric) #volverlas numericas
fecundidad$Provincia <- stri_trans_general(fecundidad$Provincia,"Latin-ASCII") #quitar tildes y ñs
##Callao está bien carlos fermin  esta como CARLOS F. FITZCARRALD transformar:
fecundidad$Provincia[fecundidad$Provincia == "CARLOS F. FITZCARRALD"] <- "CARLOS FERMIN FITZCARRALD"
#eliminar datem del marañon
fecundidad <- fecundidad[!fecundidad$Provincia=="DATEM DEL MARANON ",]
write.xlsx(fecundidad, "fecundidad.xlsx")
### indicadoresvarios ----
#minusculas con tildes
indicadores<- read.xlsx("indicadoresvarios.xlsx",skipEmptyRows = T, skipEmptyCols = T, startRow = 7)
indicadores <- indicadores[,-c(1,4, 7: 14)]#eliminar columnas innecesarias
colnames(indicadores) <- c("Departamento", "Provincia", "densidadpob", "mortalidadinf", "analfabetismo",
"analfabetismo_urb", "analfabetismo_rural", "analfabetismo_h", "analfabetismo_m")
#analfabetismo rural está como caracter
indicadores$analfabetismo_rural<- as.numeric(indicadores$analfabetismo_rural)
indicadores$Provincia <- toupper(indicadores$Provincia) #mayusculas
indicadores$Provincia <- stri_trans_general(indicadores$Provincia,"Latin-ASCII") #quitar tildes y ñs
#carlos fermin esta bien. arreglar callao:
indicadores$Provincia[indicadores$Provincia == "PROVINCIA CONSTITUCIONAL DEL CALLAO"] <- "CALLAO"
#eliminar datem del marañon
indicadores <- indicadores[!indicadores$Provincia=="DATEM DEL MARANON",]
write.xlsx(indicadores, "indicadoresvarios.xlsx")
### poblacion ----
#minusculas con tildes
poblacion<- read.xlsx("poblacion.xlsx",skipEmptyRows = T, skipEmptyCols = T ,startRow = 7)
poblacion <- poblacion[,-c(1,4)]#eliminar columnas innecesarias
colnames(poblacion) <- c("Departamento", "Provincia", "pob", "pob_ur", "pob_rural", "pob_h", "pob_m")
poblacion$Provincia <- toupper(poblacion$Provincia) #mayusculas
poblacion$Provincia <- stri_trans_general(poblacion$Provincia,"Latin-ASCII") #quitar tildes y ñs
#carlos fermin esta bien. arreglar callao:
poblacion$Provincia[poblacion$Provincia == "PROVINCIA CONSTITUCIONAL DEL CALLAO"] <- "CALLAO"
#eliminar datem del marañon
poblacion <- poblacion[!poblacion$Provincia=="DATEM DEL MARANON",]
write.xlsx(poblacion, "poblacion.xlsx")
### ingreso per capita----
#minusculas con tildes
ingreso<- read.xlsx("Ingreso-Per-Capita.xlsx",skipEmptyRows = T, skipEmptyCols = T ,startRow = 3)
ingreso <- ingreso[is.na(ingreso$Distrito),] #eliminar distritos
ingreso <- ingreso[!is.na(ingreso$Provincia),] #seleccionar provincias
ingreso <- ingreso[,c(1:3,5)]#seleccionar columas
colnames(ingreso) <- c("Ubigeo", "Departamento", "Provincia", "percapitaf")
ingreso$Provincia <- toupper(ingreso$Provincia) #mayusculas
ingreso$Provincia <- stri_trans_general(ingreso$Provincia,"Latin-ASCII") #quitar tildes y ñs
##No hay info de Callao y Carlos Fermin estan bien. arreglar DANIEL A. CARRION
ingreso$Provincia[ingreso$Provincia == "DANIEL A. CARRION"] <- "DANIEL ALCIDES CARRION"
#eliminar datem del marañon
ingreso <- ingreso[!ingreso$Provincia=="DATEM DEL MARANON",]
##Problema con Satipo:
ingreso$Provincia[ingreso$Provincia == "SATIPO 2/"] <- "SATIPO"
write.xlsx(ingreso, "Ingreso-Per-Capita.xlsx")
##Densidad Estado----
#minusculas con tildes
idePeru<- read.xlsx("idePeru.xlsx",skipEmptyRows = T, skipEmptyCols = T, sheet=4, startRow = 6)
idePeru <- idePeru[-c(221:224),]#eliminar filas innecesarias
idePeru <- idePeru[is.na(idePeru$X2),] #seleccionar provincias
idePeru <- idePeru[,-c(2,5,7,9,11,13,15,17)]#eliminar columnas innecesarias
colnames(idePeru) <- c("Ubigeo", "Provincia", "habitantes", "IDE", "identidad", "salud", "educacion", "saneamiento", "electrificacion")
idePeru$Provincia <- toupper(idePeru$Provincia) #mayusculas
idePeru$Provincia <- stri_trans_general(idePeru$Provincia,"Latin-ASCII") #quitar tildes y ñs
##Callao y Carlos Fermin estan bien. arreglar DANIEL A. CARRION
idePeru$Provincia[idePeru$Provincia == "DANIEL A. CARRION"] <- "DANIEL ALCIDES CARRION"
##Problema con Satipo:
idePeru$Provincia[idePeru$Provincia == "SATIPO 1/"] <- "SATIPO"
#eliminar datem del marañon
idePeru <- idePeru[!idePeru$Provincia=="DATEM DEL MARANON",]
write.xlsx(idePeru, "idePeru.xlsx")
View(mapa)
setwd("~/Documents/GitHub/EstadisticaMaestriaCPRI")
library(foreign)
mapa<-read.dbf("provinciasPeru.dbf")###tiene acentos y ñs
View(mapa)
mapa$Provincia <- toupper(mapa$NAME_2) #crear nueva variable con mayusculas
library(stringi)
mapa$Provincia <- stri_trans_general(mapa$Provincia,"Latin-ASCII") #quitar tildes y ñs
mapa$Provincia[mapa$Provincia == "HUENUCO"] <- "HUANUCO"
write.dbf(mapa, file="provinciasPeru.dbf")
View(mapa)
